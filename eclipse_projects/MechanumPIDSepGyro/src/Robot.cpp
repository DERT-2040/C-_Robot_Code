// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include "Commands/JoystickDrivetrain.h"
#include "Commands/MoveMeters.h"
#include "Commands/Position1RR.h"

#include "Commands/Position1RL.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Drivetrain> Robot::drivetrain;
std::shared_ptr<GyroSubsystem> Robot::gyroSubsystem;
std::shared_ptr<ClawLift> Robot::clawlift;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
RobotDrive *mechanum;
Joystick *leftStick = new Joystick{0};
Joystick *rightStick = new Joystick{1};
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    drivetrain.reset(new Drivetrain());
    gyroSubsystem.reset(new GyroSubsystem());
    clawlift.reset(new ClawLift());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// Add commands to Autonomous Sendable Chooser
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


	//chooser.AddDefault("StopFromAccel Command", new StopFromAccel());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	frc::SmartDashboard::PutData("Auto Modes", &chooser);

}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	frc::Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomousCommand =  new Position1RL();
	if (autonomousCommand != nullptr)
		autonomousCommand->Start();

	//Robot::drivetrain->turnDegrees(0.0);
	//Robot::drivetrain->UsePIDOutput(Robot::drivetrain->gAngle()+90);
}

void Robot::AutonomousPeriodic() {
	//Robot::drivetrain->strafeRight();
	frc::Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomousCommand != nullptr)
		autonomousCommand->Cancel();

	clawlift->ResetEncoders();
	clawlift->SetGroundHeight();
}

void Robot::TeleopPeriodic() {
	//driving = new JoystickDrivetrain();
	//driving->Start();
	frc::Scheduler::GetInstance()->Run();
	SmartDashboard::PutString("DB/String 0", std::to_string(clawlift->GetSetpoint()));
	SmartDashboard::PutString("DB/String 1", std::to_string(clawlift->GetPosition()));
}

START_ROBOT_CLASS(Robot);

