#include "ctre/Phoenix.h"
#include "Grabber.h"
#include "../RobotMap.h"
Grabber::Grabber() : frc::PIDSubsystem("ClawLift",0.075,0,0.06) {//Change PID Values

    SetAbsoluteTolerance(0.01);
    GetPIDController()->SetContinuous(false);
    wheelL = RobotMap::grabberintakeL;
    wheelR = RobotMap::grabberintakeR;
    armL = RobotMap::grabberactuatorL;
    armR = RobotMap::grabberactuatorR;
	SetOutputRange(-0.75,0.75);//Change these values to change speed

	armR->Set(ctre::phoenix::motorcontrol::ControlMode::Follower,8);
	wheelR->Set(ctre::phoenix::motorcontrol::ControlMode::Follower,9);

	//armR->SetInverted(true);//change to armL if arms aren't turning the right way
	//wheelR->SetInverted(true);//change to wheelL if wheels aren't turning the right way


    ultrasonic = RobotMap::sensorsUltrasonic;
    inclinometerX = RobotMap::sensorsInclinometerX;
    inclinometerY = RobotMap::sensorsInclinometerY;
    upperSwitch = RobotMap::grabberswitchupper;
    lowerSwitch = RobotMap::grabberswitchlower;
    cubeSwitch = RobotMap::cubechecker;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    range = 0;
    angle = 0;
    minPosition = -15;
    maxPosition = 60;



	//angleY = 0;
    Enable();
}

void Grabber::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
}

void Grabber::Periodic() {
	SmartDashboard::PutString("DB/String 8",std::to_string(InclinometerAngle()));

	if(upperSwitch->Get() && InclinometerAngle()>20){
		maxPosition=InclinometerAngle();
		SetSetpoint(maxPosition);
		SmartDashboard::PutString("DB/String 9",std::to_string(maxPosition));

	}
	else if(lowerSwitch->Get()&& InclinometerAngle()<20){
		minPosition = InclinometerAngle();
		//SetSetpoint(minPosition);

		//Disable();
	}
	if(cubeSwitch->Get()){
	}


}

double Grabber::ReturnPIDInput() {
	return InclinometerAngle();
}
void Grabber::UsePIDOutput(double output) {
	armL->Set(output);
}

bool Grabber::AtSetpoint(){
	return -3>GetSetpoint()-InclinometerAngle() && 3>GetSetpoint()-InclinometerAngle();
}
void Grabber::SetAngle(double angle){
	if(angle>=minPosition && angle<=maxPosition){
		SetSetpoint(angle);
	}
}
void Grabber::AdjustAngle(double speed){
	armL->Set(speed);

}
void Grabber::SetWheelSpeed(double speed){
	wheelL->Set(speed);
}

double Grabber::Ultrasonic() {
	int bits;
	ultrasonic->SetAverageBits(4);
	bits = ultrasonic->GetAverageBits();
	double averageVoltage = ultrasonic->GetAverageVoltage();
	range = averageVoltage / 0.00024892;
	//range given in meters
	return range;
}
double Grabber::InclinometerAngle() {
	//int bits;
	//inclinometerX->SetOversampleBits(2);
	//bits = inclinometerX->GetOversampleBits();
	//double averageVoltage = inclinometerX->GetAverageVoltage();
	double Voltage = inclinometerX->GetVoltage();
	angle = (Voltage - 2.5) * 45;
	//angle given in degrees
	return angle;
}

bool Grabber::HasCube(){
	return cubeSwitch->Get();
}
/*double Grabber::InclinometerY() {
	int bits;
	inclinometerY->SetAverageBits(4);
	bits = inclinometerY->GetAverageBits();
	double averageVoltage = inclinometerY->GetAverageVoltage();
	angleY = (averageVoltage - 2.5) * 45;
	//angleY given in degrees
	return angleY;
}*/
