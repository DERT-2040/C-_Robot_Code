// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"


#include "DriveTrain.h"
#include "../RobotMap.h"
#include "../Commands/Drive_with_joysticks.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS


DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    rF = RobotMap::driveTrainRF;
    rB = RobotMap::driveTrainRB;
    lF = RobotMap::driveTrainLF;
    lB = RobotMap::driveTrainLB;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    drive= new RobotDrive(lF, lB, rF, rB);
    drive->SetInvertedMotor(frc::RobotDrive::kRearLeftMotor, true);
    drive->SetInvertedMotor(frc::RobotDrive::kFrontLeftMotor, true);

}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        SetDefaultCommand(new Drive_with_joysticks());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}



// Put methods for controlling this subsystem
// here. Call these from Commands.
void DriveTrain::Teleop(double xVal, double yVal, double zVal, double sensitivity){
	//sensitivity = (sensitivity - 1)/ -2;
	drive->MecanumDrive_Cartesian(sensitivity*(DeadBand(xVal, 0.15)), sensitivity*(DeadBand(yVal,0.15)), sensitivity*(DeadBand(zVal,0.15)));

}

double DriveTrain::DeadBand(double input, double band){
	if(input > band|| input<-band){
		return input;
	}
	else{
		return 0;
	}
}




