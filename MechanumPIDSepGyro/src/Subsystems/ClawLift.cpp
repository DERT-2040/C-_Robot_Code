// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ctre/Phoenix.h"


#include "ClawLift.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

ClawLift::ClawLift() : frc::PIDSubsystem("ClawLift",0.0007,0,0) {//Change PID Values

    //SetAbsoluteTolerance(0);
    GetPIDController()->SetContinuous(false);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    liftTalon = RobotMap::clawlifttalon;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	SetOutputRange(-1,1);//Change these values to change speed
	Enable();
}

void ClawLift::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void ClawLift::Periodic() {
    // Put code here to be run every loop

}

double ClawLift::ReturnPIDInput() {
	return liftTalon->GetSensorCollection().GetQuadraturePosition();// returns the sensor value that is providing the feedback for the system

	SmartDashboard::PutString("DB/String 2", std::to_string(liftTalon->GetSensorCollection().GetQuadraturePosition()));
}
void ClawLift::UsePIDOutput(double output) {
	liftTalon->Set(-output);
}

bool ClawLift::AtSetpoint(){

	return (GetPosition()-GetSetpoint() < 100 &&GetPosition()-GetSetpoint() > -100) && (liftTalon->GetSensorCollection().GetQuadratureVelocity()<5&&liftTalon->GetSensorCollection().GetQuadratureVelocity()>-5);
}

void ClawLift::SetGroundHeight(){
	SetSetpoint(250);//Change to Right Position
}
void ClawLift::SetSwitchHeight(){
	SetSetpoint(10000);//Change to Right Position
}
void ClawLift::SetMidHeight(){
	SetSetpoint(10000);//Change to Right Position
}
void ClawLift::SetHighHeight(){
	SetSetpoint(0);//Change to Right Position
}
void ClawLift::AdjustHeight(double modifier){
	double rate = 0;//Change to rate of change wanted (modifier should be between -1 and 1)
	double actualModifier = modifier * rate;
	SetSetpoint(GetSetpoint()+actualModifier);
}
void ClawLift::ResetEncoders(){
	liftTalon->GetSensorCollection().SetQuadraturePosition(0,0);
}
